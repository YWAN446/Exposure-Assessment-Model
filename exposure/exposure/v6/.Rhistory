pp<-function(lun,din,h)
{
if(h==2)
{
a=den(lun)
b=den(din)
return(a+b)
}
if(h==1)
{
if(is.null(dim(lun)[2])||dim(lun)[2]==1)
{
summ<-append(din,lun)
}
else
{
summ<-rbind(din,lun)
}
return(den(summ))
}
else{
return(0)
}
}
ind<-sample(1:2,40,replace=TRUE)
n<-5000
burn<-1000
dat<-array(0,dim=n)
post1<-array(0,dim=40)
post2<-array(0,dim=40)
dat[1]<-0
for(i in 1:40)
{
dat[1]<-dat[1]+pp(lun[,i],din[,i],ind[i])
}
for(i in 1:(n-1))
{
j<-sample(1:40,1)
x<-ind[j]
y<-3-x
po_y<-pp(lun[,j],din[,j],y)
po_x<-pp(lun[,j],din[,j],x)
dif<-po_y-po_x
a<-min(0,dif)
u<-runif(1,0,1)
if(log(u)<=a)
{
x_new<-y
}
else
{
x_new<-x
}
ind[j]<-x_new
dat[i+1]<-dat[i]-po_x+pp(lun[,j],din[,j],x_new)
if(i>burn)
{
post1<-post1+(ind==1)
post2<-post2+(ind==2)
}
}
plot(dat[1:1000])
round(post1/(n-burn),3)
round(post2/(n-burn),3)
ind=c(rep(1,5),rep(2,35))
LH=0
for (i in 1:40){
LH=LH+pp(groupA[,i],groupB[,i],ind[i])
}
LH
indicators=c(1,1,2,1,2,rep(1,4),2,1,2,rep(1,27),2)
LH=0
for (i in 1:40){
LH=LH+pp(groupA[,i],groupB[,i],ind[i])
}
LH
ind=c(rep(1,5),rep(2,35))
LH=0
for (i in 1:40){
LH=LH+pp(groupA[,i],groupB[,i],ind[i])
}
LH
ind=c(1,1,2,1,2,rep(1,4),2,1,2,rep(1,27),2)
LH=0
for (i in 1:40){
LH=LH+pp(groupA[,i],groupB[,i],ind[i])
}
LH
logp4
set.seed(1)
groupA = cbind(x1[1:(n/2),], y1[1:(n/2),], Z[1:(n/2),])
groupB = cbind(x1[(n/2+1):n,], y1[(n/2+1):n,], Z[(n/2+1):n,])
indicators=sample(1:4,42,replace=T)
N=10000
burnIn = 1000
#and an array to hold the values that we will use in our trace plot - to show us the hopeful convergence of the M-H algorithm
#the trace plots the probability of our proposed indicators at each step
plotData = array(0, dim = N)
#and an array that will hold our posterior probabilities of a given covariate being under H1
postArray1 = array(0,dim =42)
postArray2 = array(0,dim =42)
postArray3 = array(0,dim =42)
postArray4 = array(0,dim =42)
#calculate P(I|data) for the original set of indicators
plotData[1] = logp3(indicators,groupA, groupB)+logp4(indicators,groupA, groupB)
for( i in 1:42) {
plotData[1] = plotData[1] + pp(groupA[,i], groupB[,i], indicators[i])
}
#run through N steps of the markov chain
for(i in 1:(N-1)) {
#choose a random i (uniformly)
j = sample(1:42,1)
x = indicators[j]
vec = c(1:4)
vec1 = vec[-which(vec==x)]
y = sample(vec1,1,prob=seq(1/3,3))
indicators1 = indicators
indicators1[j] = y
if ((x<3) & (y<3)){
Py = pp(groupA[,j], groupB[,j], y)
Px = pp(groupA[,j], groupB[,j], x)
} else if ((x==3) & (y<3)){
Py = pp(groupA[,j], groupB[,j],y)+logp3(indicators1,groupA,groupB)
Px = logp3(indicators,groupA,groupB)
} else if ((x<3) & (y==3)){
Py = logp3(indicators1,groupA,groupB)
Px = pp(groupA[,j], groupB[,j],x)+logp3(indicators,groupA,groupB)
} else if ((x==4) & (y<3)){
Py = pp(groupA[,j], groupB[,j],y)+logp4(indicators1,groupA,groupB)
Px = logp4(indicators,groupA,groupB)
} else if ((x<3) & (y==4)){
Py = logp4(indicators1,groupA,groupB)
Px = pp(groupA[,j], groupB[,j],x)+logp4(indicators,groupA,groupB)
} else if ((x>=3) & (y>=3)){
Py= logp4(indicators1,groupA,groupB)+logp3(indicators1, groupA,groupB)
Px= logp4(indicators,groupA,groupB)+logp3(indicators, groupA, groupB)
}
Pratio = Py-Px #we're still in logspace
alpha = min(0, Pratio) #still in logspace
u = runif(1,0,1)
if(log(u) <= alpha) {
x.next =y
Padjust=Py
} else {
x.next = x
Padjust=Px
}
indicators[j] = x.next
plotData[i+1] = plotData[i] - Px + Padjust
#if we are past the burn in period we update our posterior distribution
if(i>burnIn) {
postArray1 = postArray1 + (indicators==1)
postArray2 = postArray2 + (indicators==2)
postArray3 = postArray3 + (indicators==3)
postArray4 = postArray4 + (indicators==4)
}
}
set.seed(1)
groupA = cbind(x1[1:(n/2),], y1[1:(n/2),], Z[1:(n/2),])
groupB = cbind(x1[(n/2+1):n,], y1[(n/2+1):n,], Z[(n/2+1):n,])
indicators=sample(1:4,42,replace=T)
N=10000
burnIn = 1000
#and an array to hold the values that we will use in our trace plot - to show us the hopeful convergence of the M-H algorithm
#the trace plots the probability of our proposed indicators at each step
plotData = array(0, dim = N)
#and an array that will hold our posterior probabilities of a given covariate being under H1
postArray1 = array(0,dim =42)
postArray2 = array(0,dim =42)
postArray3 = array(0,dim =42)
postArray4 = array(0,dim =42)
#calculate P(I|data) for the original set of indicators
plotData[1] = logp3(indicators,groupA, groupB)+logp4(indicators,groupA, groupB)
for( i in 1:42) {
plotData[1] = plotData[1] + pp(groupA[,i], groupB[,i], indicators[i])
}
#run through N steps of the markov chain
for(i in 1:(N-1)) {
#choose a random i (uniformly)
j = sample(1:42,1)
x = indicators[j]
vec = c(1:4)
vec1 = vec[-which(vec==x)]
y = sample(vec1,1,prob=seq(1/3,3))
indicators1 = indicators
indicators1[j] = y
if ((x<3) & (y<3)){
Py = pp(groupA[,j], groupB[,j], y)
Px = pp(groupA[,j], groupB[,j], x)
} else if ((x==3) & (y<3)){
Py = pp(groupA[,j], groupB[,j],y)+logp3(indicators1,groupA,groupB)
Px = logp3(indicators,groupA,groupB)
} else if ((x<3) & (y==3)){
Py = logp3(indicators1,groupA,groupB)
Px = pp(groupA[,j], groupB[,j],x)+logp3(indicators,groupA,groupB)
} else if ((x==4) & (y<3)){
Py = pp(groupA[,j], groupB[,j],y)+logp4(indicators1,groupA,groupB)
Px = logp4(indicators,groupA,groupB)
} else if ((x<3) & (y==4)){
Py = logp4(indicators1,groupA,groupB)
Px = pp(groupA[,j], groupB[,j],x)+logp4(indicators,groupA,groupB)
} else if ((x>=3) & (y>=3)){
Py= logp4(indicators1,groupA,groupB)+logp3(indicators1, groupA,groupB)
Px= logp4(indicators,groupA,groupB)+logp3(indicators, groupA, groupB)
}
Pratio = Py-Px #we're still in logspace
alpha = min(0, Pratio) #still in logspace
u = runif(1,0,1)
if(log(u) <= alpha) {
x.next =y
Padjust=Py
} else {
x.next = x
Padjust=Px
}
indicators[j] = x.next
if(x.next==x){
plotData[i+1]=plotData[i]
}
if(x.next==y){
plotData[i+1]=plotData[i]+Pratio
}
#if we are past the burn in period we update our posterior distribution
if(i>burnIn) {
postArray1 = postArray1 + (indicators==1)
postArray2 = postArray2 + (indicators==2)
postArray3 = postArray3 + (indicators==3)
postArray4 = postArray4 + (indicators==4)
}
}
#pdf("plotData.pdf")
plot(plotData)
#dev.off()
pos1 = round(postArray1/(N-burnIn),2)
pos2 = round(postArray2/(N-burnIn),2)
pos3 = round(postArray3/(N-burnIn),2)
pos4 = round(postArray4/(N-burnIn),2)
print(pos1)
print(pos2)
print(pos3)
print(pos4)
library(lattice);
library(sfsmisc);
setwd("~/stat/sanipath/exposure/exposure/v9/")
load("HH0-1.rda")
load("HH1-2.rda")
load("HH2-5.rda")
load("Net.HH0-1.rda")
load("Net.HH1-2.rda")
load("Net.HH2-5.rda")
neighbourhoods <- c("alajo","bukom","old-fadama","shiabu");
ages<-c("0-1","1-2","2-5");
labels <- c("dirt","floor","offgr","drain",
"septage","food","tap water","sachet water","total");
frac0 <- function(mc) return(1-length(mc[mc>0])/length(mc));
non0 <- function(mc){
tmp <- mc; tmp[!(tmp>0)] <- NA; return(tmp);
}
boxquan <- function(x){
stats <- c(as.numeric(quantile(x,probs=c(0.05,0.25),na.rm=TRUE)),
# log10(mean(10^x,na.rm=TRUE)),
quantile(x,0.5,na.rm=TRUE),
as.numeric(quantile(x,probs=c(0.75,0.95),na.rm=TRUE)));
n  <- length(which(!is.na(x)));
# conf <- c( 1.58*(stats[4]-stats[2])/sqrt(n),
#           -1.58*(stats[4]-stats[2])/sqrt(n)) +
#         as.numeric(quantile(x,probs=0.5,na.rm=TRUE));
conf <- c(stats[5],stats[1]);
out <- x[x < stats[1] | x > stats[5]]; # outliers; not used
return(list("stats"=stats,"n"=n,"conf"=conf,"out"=out));
}
mergequan <- function(xmat,names){
stats <- c(); n <- c(); conf <- c(); out <- c(); group <- c();
for(k in 1:ncol(xmat)){
tmp   <- boxquan(xmat[,k]);
stats <- cbind(stats,tmp$stats);
n     <- c(n,tmp$n);
conf  <- cbind(conf,tmp$conf);
out   <- c(out,tmp$out);
group <- c(group,rep(k,length(tmp$out)));
}
return(list("stats"=stats,"n"=n,"conf"=conf,
"out"=out,"group"=group,"names"=names));
}
n.neighb <- 4;
num.mc <- 1000;
setwd("~/stat/sanipath/exposure/exposure/v14/")
library(devtools)
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
days=100
for (k.age in 1:3){
if (k.age==1){
int.dirt<-HH.1[[14]]
int.flo<-HH.1[[16]]
int.offgr<-HH.1[[15]]
int.drain<-HH.1[[13]]
int.septage<-HH.1[[17]]
int.produce<-HH.1[[18]]
dw<-HH.1[[19]]
int.total<-HH.1[[20]]
}
if (k.age==2){
int.dirt<-HH.2[[14]]
int.flo<-HH.2[[16]]
int.offgr<-HH.2[[15]]
int.drain<-HH.2[[13]]
int.septage<-HH.2[[17]]
int.produce<-HH.2[[18]]
dw<-HH.2[[19]]
int.total<-HH.2[[20]]
}
if (k.age==3){
int.dirt<-HH.3[[14]]
int.flo<-HH.3[[16]]
int.offgr<-HH.3[[15]]
int.drain<-HH.3[[13]]
int.septage<-HH.3[[17]]
int.produce<-HH.3[[18]]
dw<-HH.3[[19]]
int.total<-HH.3[[20]]
}
par(mfrow=c(1,1));
for(k.neighb in 1:n.neighb){
expo<-matrix(0,nrow=9000,ncol=3)
expo[1:1000,1]<-as.numeric(int.dirt[k.neighb,])
expo[1001:2000,1]<-as.numeric(int.flo[k.neighb,])
expo[2001:3000,1]<-as.numeric(int.offgr[k.neighb,])
expo[3001:4000,1]<-as.numeric(int.drain[k.neighb,])
expo[4001:5000,1]<-as.numeric(int.septage[k.neighb,])
expo[5001:6000,1]<-as.numeric(int.produce[k.neighb,])
expo[6001:7000,1]<-as.numeric(dw[k.neighb,1,])
expo[7001:8000,1]<-as.numeric(dw[k.neighb,2,])
expo[8001:9000,1]<-expo[1:1000,1]+expo[1001:2000,1]+expo[2001:3000,1]+expo[3001:4000,1]+expo[4001:5000,1]+expo[5001:6000,1]+expo[6001:7000,1]+expo[7001:8000,1]
expo[1:9000,2]<-rep(1:1000,9)
#"dirt","flo","offgr","drain","septage","produce","tap","sachet","total"
expo[1:9000,3]<-rep(1:9, each=1000)
vec<-rep(c(1:days),8)+rep(c(0,1000,2000,3000,4000,5000,6000,7000),each=days)
plot(expo[vec,2],log10(expo[vec,1]),col=rep(c("chocolate3","antiquewhite4","antiquewhite2","black","firebrick4","green2","blue","cyan"),each=days),
main=paste(neighbourhoods[k.neighb],"Age Group",ages[k.age]),cex=0.8,xlab="Day",ylab="log10(dose)",ylim=c(0,20),pch=19)
legend("topright",      # location and inset
bty="n", cex=1,              # suppress legend box, shrink text 50%
title="Pathway",
c("soil","floor","offgr","drain",
"DF","food","tap water","sachet"), pch=19,
col=c("chocolate3","antiquewhite4","antiquewhite2","black","firebrick4","green2","blue","cyan"))
#table(expo[which(expo[,1]>100000),3])
end<-8000+days
vec<-c(8001:end)
alpha=1.55e-1
N50=2.11e6
y=1-(1+(expo[vec,1]*(2^(1/alpha)-1)/N50))^(-alpha)
plot(expo[vec,2],log10(expo[vec,1]),col="black",
main=paste(neighbourhoods[k.neighb],"Age Group",ages[k.age]),cex=y*3,xlab="Day",ylab="log10(dose)",ylim=c(0,20),pch=19)
legend("topright",      # location and inset
bty="n", cex=1,              # suppress legend box, shrink text 50%
c("total exposure"), pch=19,
col="black")
}
}
logd=c(0:2000)/100
end<-8000+days
vec<-c(8001:end)
vec0<-rep(c(1:days),8)+rep(c(0,1000,2000,3000,4000,5000,6000,7000),each=days)
colors<-c("chocolate3","antiquewhite4","antiquewhite2","black","firebrick4","green2","blue","cyan")
i=1
days
vec0
k.age=3
library(lattice);
library(sfsmisc);
setwd("~/stat/sanipath/exposure/exposure/v14/")
load("HH0-1.rda")
load("HH1-2.rda")
load("HH2-5.rda")
load("Net.HH0-1.rda")
load("Net.HH1-2.rda")
load("Net.HH2-5.rda")
neighbourhoods <- c("Alajo","Bukom","Old Fadama","Shiabu");
ages<-c("0-1 year","1-2 years","2-5 years");
labels <- c("dirt","floor","offgr","drain",
"septage","food","tap water","sachet water","total");
frac0 <- function(mc) return(1-length(mc[mc>0])/length(mc));
non0 <- function(mc){
tmp <- mc; tmp[!(tmp>0)] <- NA; return(tmp);
}
boxquan <- function(x){
stats <- c(as.numeric(quantile(x,probs=c(0.05,0.25),na.rm=TRUE)),
# log10(mean(10^x,na.rm=TRUE)),
quantile(x,0.5,na.rm=TRUE),
as.numeric(quantile(x,probs=c(0.75,0.95),na.rm=TRUE)));
n  <- length(which(!is.na(x)));
# conf <- c( 1.58*(stats[4]-stats[2])/sqrt(n),
#           -1.58*(stats[4]-stats[2])/sqrt(n)) +
#         as.numeric(quantile(x,probs=0.5,na.rm=TRUE));
conf <- c(stats[5],stats[1]);
out <- x[x < stats[1] | x > stats[5]]; # outliers; not used
return(list("stats"=stats,"n"=n,"conf"=conf,"out"=out));
}
mergequan <- function(xmat,names){
stats <- c(); n <- c(); conf <- c(); out <- c(); group <- c();
for(k in 1:ncol(xmat)){
tmp   <- boxquan(xmat[,k]);
stats <- cbind(stats,tmp$stats);
n     <- c(n,tmp$n);
conf  <- cbind(conf,tmp$conf);
out   <- c(out,tmp$out);
group <- c(group,rep(k,length(tmp$out)));
}
return(list("stats"=stats,"n"=n,"conf"=conf,
"out"=out,"group"=group,"names"=names));
}
n.neighb <- 4;
num.mc <- 1000;
setwd("~/stat/sanipath/exposure/exposure/v14/")
for (k.age in 1:3){
if (k.age==1){
int.dirt1<-HH.1[[14]]
int.flo1<-HH.1[[16]]
int.offgr1<-HH.1[[15]]
int.drain1<-HH.1[[13]]
int.septage1<-HH.1[[17]]
int.produce1<-HH.1[[18]]
dw1<-HH.1[[19]]
int.total1<-HH.1[[20]]
}
if (k.age==2){
int.dirt2<-HH.2[[14]]
int.flo2<-HH.2[[16]]
int.offgr2<-HH.2[[15]]
int.drain2<-HH.2[[13]]
int.septage2<-HH.2[[17]]
int.produce2<-HH.2[[18]]
dw2<-HH.2[[19]]
int.total2<-HH.2[[20]]
}
if (k.age==3){
int.dirt3<-HH.3[[14]]
int.flo3<-HH.3[[16]]
int.offgr3<-HH.3[[15]]
int.drain3<-HH.3[[13]]
int.septage3<-HH.3[[17]]
int.produce3<-HH.3[[18]]
dw3<-HH.3[[19]]
int.total3<-HH.3[[20]]
}
}
for (k.age in 1:3){
if (k.age==1){
int.dirt1<-HH.1[[14]]
int.flo1<-HH.1[[16]]
int.offgr1<-HH.1[[15]]
int.drain1<-HH.1[[13]]
int.septage1<-HH.1[[17]]
int.produce1<-HH.1[[18]]
dw1<-HH.1[[19]]
int.total1<-HH.1[[20]]
}
if (k.age==2){
int.dirt2<-HH.2[[14]]
int.flo2<-HH.2[[16]]
int.offgr2<-HH.2[[15]]
int.drain2<-HH.2[[13]]
int.septage2<-HH.2[[17]]
int.produce2<-HH.2[[18]]
dw2<-HH.2[[19]]
int.total2<-HH.2[[20]]
}
if (k.age==3){
int.dirt3<-HH.3[[14]]
int.flo3<-HH.3[[16]]
int.offgr3<-HH.3[[15]]
int.drain3<-HH.3[[13]]
int.septage3<-HH.3[[17]]
int.produce3<-HH.3[[18]]
dw3<-HH.3[[19]]
int.total3<-HH.3[[20]]
}
}
test<-cbind(log10(non0(int.dirt3[1,])),log10(non0(int.dirt3[2,])),log10(non0(int.dirt3[3,])),log10(non0(int.dirt3[4,])),
log10(non0(int.flo3[1,])),log10(non0(int.flo3[2,])),log10(non0(int.flo3[3,])),log10(non0(int.flo3[4,])),
log10(non0(int.offgr3[1,])),log10(non0(int.offgr3[2,])),log10(non0(int.offgr3[3,])),log10(non0(int.offgr3[4,])),
log10(non0(int.drain3[1,])),log10(non0(int.drain3[2,])),log10(non0(int.drain3[3,])),log10(non0(int.drain3[4,])),
log10(non0(int.septage3[1,])),log10(non0(int.septage3[2,])),log10(non0(int.septage3[3,])),log10(non0(int.septage3[4,])),
log10(non0(int.produce3[1,])),log10(non0(int.produce3[2,])),log10(non0(int.produce3[3,])),log10(non0(int.produce3[4,])),
log10(non0(dw3[1,1,])),log10(non0(dw3[2,1,])),log10(non0(dw3[3,1,])),log10(non0(dw3[4,1,])),   # drink tap water
log10(non0(dw3[1,2,])),log10(non0(dw3[2,2,])),log10(non0(dw3[3,2,])),log10(non0(dw3[4,2,])),  # drink sachet water
log10(non0(int.total3[1,])),log10(non0(int.total3[2,])),log10(non0(int.total3[3,])),log10(non0(int.total3[4,])))
View(test)
test<-cbind(c(log10(non0(int.dirt3[1,])),log10(non0(int.dirt3[2,])),log10(non0(int.dirt3[3,])),log10(non0(int.dirt3[4,]))),
c(log10(non0(int.flo3[1,])),log10(non0(int.flo3[2,])),log10(non0(int.flo3[3,])),log10(non0(int.flo3[4,]))),
c(log10(non0(int.offgr3[1,])),log10(non0(int.offgr3[2,])),log10(non0(int.offgr3[3,])),log10(non0(int.offgr3[4,]))),
c(log10(non0(int.drain3[1,])),log10(non0(int.drain3[2,])),log10(non0(int.drain3[3,])),log10(non0(int.drain3[4,]))),
c(log10(non0(int.septage3[1,])),log10(non0(int.septage3[2,])),log10(non0(int.septage3[3,])),log10(non0(int.septage3[4,]))),
c(log10(non0(int.produce3[1,])),log10(non0(int.produce3[2,])),log10(non0(int.produce3[3,])),log10(non0(int.produce3[4,]))),
c(log10(non0(dw3[1,1,])),log10(non0(dw3[2,1,])),log10(non0(dw3[3,1,])),log10(non0(dw3[4,1,]))),   # drink tap water
c(log10(non0(dw3[1,2,])),log10(non0(dw3[2,2,])),log10(non0(dw3[3,2,])),log10(non0(dw3[4,2,]))),  # drink sachet water
c(log10(non0(int.total3[1,])),log10(non0(int.total3[2,])),log10(non0(int.total3[3,])),log10(non0(int.total3[4,]))))
quantile(test[,6],prob = c(0.025,0.5,0.975),na.rm = T)
quantile(test[,1],prob = c(0.025,0.5,0.975),na.rm = T)
quantile(log10(non0(int.produce3[2,])),prob = c(0.025,0.5,0.975),na.rm = T)
quantile(log10(non0(int.dirt3[2,])),prob = c(0.025,0.5,0.975),na.rm = T)
quantile(log10(non0(int.drain3[2,])),prob = c(0.025,0.5,0.975),na.rm = T)
quantile(log10(non0(int.septage3[2,])),prob = c(0.025,0.5,0.975),na.rm = T)
source("~/stat/sanipath/exposure/exposure/v14/v6.load0.r")
View(sanidata[which(sanidata$samtype=="handrinse")])
sanidata$samtype
levels(sanidata$samtype)
View(sanidata[which(sanidata$samtype=="handrinse"),])
sanidata$ec.denom[which(sanidata$samtype=="handrinse"),]
sanidata$ec.denom[which(sanidata$samtype=="handrinse")]
2000/0.1*500
200/0.1*500
